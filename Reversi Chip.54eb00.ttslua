function onLoad()

  -- local params = {}
  -- params.click_function = 'printHello'
  -- params.function_owner = self
  -- params.label = 'Hello!'
  self.createButton({

    label="ORDENAR",
    click_function="ordenar_mano_v4",
    function_owner=self,
    position={0,0.1,0},
    height=450, width=450,
    font_size=90

  })


end


function obtener_cartas_mano(color_jugador)

  -- Obtenemos cartas de la mano
  mano = Player[color_jugador].getHandObjects()
  -- Contar número de cartas de la mano
  N_cartas = #mano

  -- Creamos vector que contiene los tipos de carta de la mano,
  -- de izquierda a derecha
  mano_actual = {}
  for k = 1,N_cartas
  do
    carta = mano[k]
    name = carta.getName()
    nameT = name.sub(name,1,1)
    mano_actual[k]= nameT
  end

  return mano_actual

end


function obtener_pos_carta(N_cartas, mano_actual, v_orden)

  -- Obtenemos la posición respecto a la lista ordenada
  -- para cada carta de la mano
  pos_carta = {}

  for k = 1,N_cartas do
    pos_carta[k] = contains(v_orden,mano_actual[k])
  end

  return pos_carta

end


function identificar_posicion_carta(N_cartas, pos_carta, mano_i_sorted)

  -- Identificamos posición de cada carta según orden obtenido
  pos_id_v = {}

  for k = 1,N_cartas do
    for j = 1,N_cartas do

      if pos_carta[k] == mano_i_sorted[j] then
        pos_id_v[k] = j
        break
      end

    end
  end

  return pos_id_v

end


function contains(list, x)
  count = 1
	for _, v in pairs(list) do
		if v == x then return count end
    count = count + 1
	end
	count = -1
  return count
end


function rutina_ordenar_v6(k,posM)

  for j = k, N_cartas do

    if pos_id_v[j] == k and j ~= k then
        --print('j = ',j)
        cond = pos_id_v[k] == (k+1)

        -- Hay que crear nuevo vector posición reordenando según lo encontrado
        if cond == false then

          pos_id_v[j] = pos_id_v[k]
          pos_id_v[k] = k

        else

          pos_id_v_rem = {}
          cont = 1
          for i = 1,(j-1) do
            pos_id_v_rem[cont] = pos_id_v[i]
            cont = cont + 1
          end
          for i = (j+1), N_cartas do
            pos_id_v_rem[cont] = pos_id_v[i]
            cont = cont + 1
          end
          --print(table.concat(pos_id_v_rem, " "))
          pos_id_v = table.insert(pos_id_v_rem,k,k)

        end
        --print('Nuevo vector ordenado')
        --print(table.concat(pos_id_v, " "))


        -- Coordenadas de posición objetivo
        p0 = posM[j]
        -- Coordenadas de posición a quitar
        pf = posM[k]

        -- Metemos offset necesario
        off_X = off_X_mano
        off_Z = off_Z_mano

        pf = { pf[1]+off_X_mano, pf[2], pf[3]+off_Z_mano}
        p0 = { p0[1]-off_X_mano, p0[2], p0[3]-off_Z_mano}

        mano[j].setPosition(pf)

        -- Si en el objetivo está la siguiente carta, cuidado
        if cond == false then
          mano[k].setPosition(p0)
        end



    end

  end


end



function ordenar_mano_v4()

  --print('')
  color_jugador = 'White'

  -- Obtenemos cartas de la mano
  mano = Player[color_jugador].getHandObjects()
  -- Contar número de cartas de la mano
  N_cartas = #mano

  if N_cartas >= 1 then

    -- Posición última de la mano
    p_ult = mano[N_cartas].getPosition()

    -- Localizamos en qué lado de la mesa está situado
    -- para aplicar posteriormente offset correcto
    p1 = mano[1].getPosition()
    off = 0.2
    if p1[1] > 25 then
      off_X_mano = 0
      off_Z_mano = -off
    elseif p1[1] < -25 then
      off_X_mano = 0
      off_Z_mano = off
    elseif p1[3] > 25 then
      off_X_mano = off
      off_Z_mano = 0
    elseif p1[3] < -25 then
      off_X_mano = -off
      off_Z_mano = 0
    end

    -- Vector con el orden correcto de cartas
    local v_orden = {'Y','2','A','K','Q','J','1','9','8','7','6','5','4','3'}

    -- Obtenemos cartas de la mano
    mano = Player[color_jugador].getHandObjects()
    -- Creamos vector que contiene los tipos de carta de la mano,
    mano_actual = obtener_cartas_mano(color_jugador)
    -- Obtenemos la posición respecto a la lista ordenada
    pos_carta_i = obtener_pos_carta(N_cartas, mano_actual, v_orden)
    pos_carta_k = obtener_pos_carta(N_cartas, mano_actual, v_orden)
    -- Vector de posiciones ordenado numéricamente
    mano_i_sorted = table.sort(pos_carta_i)
    -- Identificamos posición de cada carta según orden obtenido
    pos_id_v = identificar_posicion_carta(N_cartas, pos_carta_k, mano_i_sorted)

    --print('')


    -- Posiciones de cartas sin mover
    posM = {}
    for k = 1,N_cartas do
      p0 = mano[k].getPosition()
      posM[k] = p0
    end

    -- Algoritmo que va colocando cada carta en su sitio
    -- y va detectando posición actual de las N_cartas
    for k = 1,(N_cartas-1) do

      --print('Posiciones de partida: k =',k)
      --print(table.concat(pos_id_v, " "))

      -- Localizamos qué posición tiene que tener la carta
      rutina_ordenar_v6(k,posM)

    end

  end

end