function colocaCartasEnZona_v3(salidaE,zona)

    nObjetosActual     = salidaE[1]
    tipo_canasta       = salidaE[2]
    activar_colocacion = salidaE[3]

    local objectsInZone = zona.getObjects()
    local nObjetos      = #objectsInZone

    local posicionCarta = {}
    local rotacionCarta = {}
    local posicionZonai = zona.getPosition()
    local rotacionZonai = zona.getRotation()

    -- Parámetros de colocación
    local paramXA = 3.3
    local paramXB = 0.9
    local paramYA = 1.5
    local angA   = 0
    local angB   = 9

    -- Si ha variado el número de objetos en el interior de la zona
    -- y el número de cartas es 8 como máximo, ejecutamos el script
    if (nObjetos ~= nObjetosActual) and (nObjetos <= 8) then

      if activar_colocacion == 0 then
        print('No funciona')
      end

      print('')
      print('nObjetosActual = ',nObjetosActual)
      print('tipo_canasta = ',tipo_canasta)

      print('nObjetos = ',nObjetos)

      if nObjetos < nObjetosActual then
        obj_in_out = 'out'
      else
        obj_in_out = 'in'
      end

      print('')
      print('obj_in_out = ',obj_in_out)

      nObjetosActual = nObjetos


      error_tipo_obj = false
      -- Si objeto entra, detectamos cual es (cual no está bloqueado), y si es una carta
      if obj_in_out == 'in' then

        kk    = 1
        k_new = 0

        if nObjetos > 0 then

          obj      = objectsInZone[kk]
          obj_name = obj.name
          print(obj_name)
          if obj_name == 'Card' or obj_name == 'CardCustom' then
            while k_new == 0 do
              obj      = objectsInZone[kk]
              obj_name = obj.name
              bloq  = obj.getLock()
              if bloq == false then
                  k_new = kk
              end
              kk = kk + 1
            end
          else
            error_tipo_obj = true
          end

        end
        print('k_new = ',k_new)
      end
      print('error_tipo_obj = ',error_tipo_obj)


      -- Una vez sabemos cual es el objeto que acaba de entrar, actuamos:
      bloquear_carta = 'no'

      -- El objeto introducido en zona no es una carta
      if error_tipo_obj == true then
        printToAll('No se pueden colocar mazos de cartas en la zona de canastas', {1,0,0})

      -- Si hay carta nueva que haya entrado en zona
      elseif error_tipo_obj == false and obj_in_out == 'in' then

        -- Contamos cuantos monos hay en la canasta
        Nmonos = 0
        for i = 1,nObjetos do
          carta = objectsInZone[i]
          nombreCarta = carta.getName()
          if (nombreCarta == 'Joker') or (nombreCarta == '2c') or
                 (nombreCarta == '2r') or (nombreCarta == '2p') or
                 (nombreCarta == '2t') then
            Nmonos = Nmonos + 1
          end
        end

        print('')
        print('Nmonos = ',Nmonos)

        -- Colocamos la carta nueva según condiciones
        carta = objectsInZone[k_new]
        nombreCarta = carta.getName()
        numCarta  = string.sub(nombreCarta,
                    string.len(nombreCarta)-2,
                    string.len(nombreCarta)-1)
        paloCarta = string.sub(nombreCarta,-1)

        if (nombreCarta == 'Joker') or (nombreCarta == '2c') or
               (nombreCarta == '2r') or (nombreCarta == '2p') or
               (nombreCarta == '2t') then
          numCarta = 'Mono'
        end

        print('nombreCarta = ',nombreCarta)
        print('numCarta = ',numCarta)
        print('paloCarta = ',paloCarta)

        -- Se ha introducido marcador, sin ser la carta nº 8
        if (nObjetos < 8 and (nombreCarta == 'Oculta' or nombreCarta == 'Oculta Apoyada')) then
          printToAll('El marcador de canasta oculta se tiene que poner al final', {r=1,g=0,b=0})

        -- Se ha introducido como carta nº8 una carta que no es el marcador
        elseif nObjetos == 8 and (nombreCarta ~= 'Oculta' and nombreCarta ~= 'Oculta Apoyada') then
          printToAll('La carta número 8 sólo puede ser el marcador de canasta oculta', {r=1,g=0,b=0})

        -- Se ha introducido la primera carta de la canasta
        elseif nObjetos == 1 then

          -- Si la carta es un mono
          if (nombreCarta == 'Joker') or (nombreCarta == '2c') or
                 (nombreCarta == '2r') or (nombreCarta == '2p') or
                 (nombreCarta == '2t') then
            tipo_canasta = numCarta
            txt_out = 'La canasta será del tipo: ' .. tipo_canasta
            printToAll(txt_out, {r=1,g=0,b=0})
            bloquear_carta = 'si'

          -- Si la carta es una flor
          elseif (nombreCarta == '3c') or (nombreCarta == '3r') then
            printToAll('No se pueden hacer canastas de flores, colocala en su sitio', {r=1,g=0,b=0})

          -- Si la carta es una carta normal
          else
            tipo_canasta = numCarta
            txt_out = 'La canasta será del tipo: ' .. tipo_canasta
            printToAll(txt_out, {r=1,g=0,b=0})
            bloquear_carta = 'si'
          end

        -- Se introduce desde la 2ª a la 7ª carta de la canasta
        elseif nObjetos > 1 and nObjetos < 7 then
          -- Necesitamos conocer el tipo de canasta, para saber si es correcta la carta

          -- Si la carta no coincide con el tipo de canasta y no es un mono
          if tipo_canasta ~= numCarta and numCarta ~= 'Mono' then
            printToAll('Carta no válida', {r=1,g=0,b=0})

          -- Si la carta no coincide con el tipo de canasta, pero es un mono
          elseif tipo_canasta ~= numCarta and numCarta == 'Mono' then

            if Nmonos > math.floor(nObjetos /2) then
              txt_out = 'Superado número máximo actual de monos'
              printToAll(txt_out, {r=1,g=0,b=0})
            else
              txt_out = 'Canasta de tipo ' .. numCarta .. ' - ' .. (7-nObjetos) .. ' restantes'
              printToAll(txt_out, {r=1,g=0,b=0})
              bloquear_carta = 'si'
            end

          -- Si la carta coincide con el tipo de canasta
          else
            txt_out = 'Canasta de tipo ' .. numCarta .. ' - ' .. (7-nObjetos) .. ' restantes'
            printToAll(txt_out, {r=1,g=0,b=0})
            bloquear_carta = 'si'
          end

        -- Se introduce desde la 7ª canasta
        elseif nObjetos == 7 then


          -- Si la carta no coincide con el tipo de canasta y no es un mono
          if tipo_canasta ~= numCarta and numCarta ~= 'Mono' then
            printToAll('Carta no válida', {r=1,g=0,b=0})

          -- Si la carta no coincide con el tipo de canasta, pero es un mono
          elseif tipo_canasta ~= numCarta and numCarta == 'Mono' then

            if Nmonos > math.floor(nObjetos /2) then
              txt_out = 'Superado número máximo actual de monos'
              printToAll(txt_out, {r=1,g=0,b=0})
            else
              txt_out = '¡Canasta completa!'
              printToAll(txt_out, {r=1,g=0,b=0})
              bloquear_carta = 'si'
            end

          -- Si la carta coincide con el tipo de canasta
          else
            txt_out = '¡Canasta completa!'
            printToAll(txt_out, {r=1,g=0,b=0})
            bloquear_carta = 'si'
          end

        -- Carta nº8 es un marcador
        elseif nObjetos == 8 and (nombreCarta == 'Oculta' or nombreCarta == 'Oculta Apoyada') then
          txt_out = '¡Canasta oculta!'
          printToAll(txt_out, {r=1,g=0,b=0})
          bloquear_carta = 'si'
        end

      end


    print('Colocamos? ',bloquear_carta)
    -- Bloqueamos carta si procede
    if bloquear_carta == 'si' then
      -- Tenemos que colocar en su sitio

      -- Detectamos lado de mesa
      local signo     = 1
      if posicionZonai.x < 0 then
        signo = -1
      end

      posX = paramXA*signo - (nObjetos-1)*paramXB*signo
      -- Posición de la zona
      posicionCarta.x = posicionZonai.x - posX
      posicionCarta.y = paramYA
      posicionCarta.z = posicionZonai.z

      --angX = signo * ( (8-nObjetos)*(angA/8) + angB )
      angX = angB
      rotacionCarta.x = angX
      rotacionCarta.y = rotacionZonai.y
      rotacionCarta.z = rotacionZonai.z

      -- Colocamos
      objectsInZone[k_new].setPosition(posicionCarta)
      objectsInZone[k_new].setRotation(rotacionCarta)

      -- Bloqueamos
      objectsInZone[k_new].setLock(true)
    end


  end

  arg_out = {}
  arg_out[1] = nObjetosActual
  arg_out[2] = tipo_canasta
  arg_out[3] = 0

  return arg_out

-- Final de función
end


function colocaCartasEnZona(nObjetosActual,zona)

    local objectsInZone = zona.getObjects()
    local nObjetos = #objectsInZone
    local posicionCarta = {}
    local rotation = zona.getRotation()
    local posicionZonai = zona.getPosition()
    local tipoCanasta = ''
    local nMonos = 0
    local nNormales = 0
    local signo = 1

    if posicionZonai.x < 0 then
      signo = -1
    end

    posicionCarta.x = posicionZonai.x-(3.3*signo)
    posicionCarta.y = posicionZonai.y
    posicionCarta.z = posicionZonai.z

    if (nObjetos ~= nObjetosActual) and (nObjetos < 9) then

      nObjetosActual = nObjetos

      for j,carta in pairs(objectsInZone) do

        local nombreCarta = carta.getName()
        local tipoCarta = ''

        if (j < 8 and (nombreCarta == 'Oculta' or nombreCarta == 'Oculta Apoyada')) then
          printToAll('La carta oculta se tiene que poner al final', {r=1,g=0,b=0})
          return nObjetosActual
        elseif j == 8 and (nombreCarta ~= 'Oculta' and nombreCarta ~= 'Oculta Apoyada') then
          printToAll('La carta número 8 solo puede ser la carta oculta', {r=1,g=0,b=0})
          return nObjetosActual
        end

        if (nombreCarta == 'Joker') or
           (nombreCarta == '2c') or
           (nombreCarta == '2r') or
           (nombreCarta == '2p') or
           (nombreCarta == '2t') then
          nMonos = nMonos + 1
          tipoCarta = 'Mono'
        else
          tipoCarta = string.sub(nombreCarta,
                      string.len(nombreCarta)-2,
                      string.len(nombreCarta)-1)
        end

        if tipoCarta == '3' then
          print('No se pueden hacer canastas de 3')
          return nObjetosActual
        end

        if j == 1 then
          tipoCanasta = tipoCarta
          print('La canasta será del tipo: ', tipoCarta)
        elseif (nombreCarta ~= 'Oculta') and (nombreCarta ~= 'Oculta Apoyada')
                and ((tipoCanasta ~= tipoCarta) and (tipoCarta ~= 'Mono' )) or
                ((tipoCanasta ~= 'Mono') and (nMonos > (nObjetos/2))) then
          print('Esta carta no es válida para esta canasta')
          return nObjetosActual
        else
          print('Esta carta es válida')
        end

      end

      for _, object in ipairs(objectsInZone) do
        object.setPosition(posicionCarta)
        object.setRotation(rotation)
        object.setLock(true)
        posicionCarta.x = posicionCarta.x+(0.75*signo)
        posicionCarta.y = posicionCarta.y+0.0001
      end

  end

  return nObjetosActual

end
