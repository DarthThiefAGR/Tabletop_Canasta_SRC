function colocar_cartas_descarte(salidaDE,zona)

      nObjetosActual     = salidaDE[1]

      local objectsInZone = zona.getObjects()

      tipo_objeto = objectsInZone.name
      local nObjetos      = #objectsInZone

      if tipo_objeto == 'CustomCard' or tipo_objeto == 'Card' then
        nObjetos = 1
        objeto_inicial = 'Carta'
      elseif tipo_objeto == 'Deck' then
        mazoD = objectsInZone[1]
        nObjetos = #mazoD
        objeto_inicial = 'Mazo'
      else
        objeto_inicial = 'Vacio'
      end

      --print(nObjetos)

      local posicionCarta = {}
      local rotacionCarta = {}

      local posicionZonai = zona.getPosition()
      local rotacionZonai = zona.getRotation()


      -- Si ha variado el número de objetos en el interior de la zona
      -- y el número de cartas es 8 como máximo, ejecutamos el script

      if (nObjetos ~= nObjetosActual) then

        print('')
        print('objeto_inicial = ',objeto_inicial)

        if nObjetos < nObjetosActual then
          obj_in_out = 'out'
        else
          obj_in_out = 'in'
        end

        print('obj_in_out = ',obj_in_out)

        nObjetosActual = nObjetos

        error_tipo_obj = false

        -- Si objeto entra, detectamos cual es (cual no está bloqueado), y si es una carta
        if obj_in_out == 'in' then

          kk    = 1
          k_new = 0

          if nObjetos > 0 then

            obj      = objectsInZone[kk]
            obj_name = obj.name
            if obj_name ~= nil then
              print(obj_name)
              if obj_name == 'Card' or obj_name == 'CardCustom' then
                while k_new == 0 do
                  obj      = objectsInZone[kk]
                  obj_name = obj.name
                  bloq  = obj.getLock()
                  if bloq == false then
                      k_new = kk
                  end
                  kk = kk + 1
                end
              else
                error_tipo_obj = true
              end
            else
              error_tipo_obj = true
            end

          end
          --print('k_new = ',k_new)
        end
        --print('error_tipo_obj = ',error_tipo_obj)


        -- Una vez sabemos cual es el objeto que acaba de entrar, actuamos:
        colocar_carta = 'no'

        -- El objeto introducido en zona no es una carta
        if error_tipo_obj == true then
          printToAll('Error', {1,0,0})

        -- Si hay carta nueva que haya entrado en zona
        elseif error_tipo_obj == false and obj_in_out == 'in' then

          -- Colocamos la carta nueva según condiciones
          carta = objectsInZone[k_new]
          nombreCarta = carta.getName()
          print(nombreCarta)

          -- Se ha introducido la primera carta de la canasta
          if nObjetos == 1 then

            colocar_carta = 'carta'

          -- Siguientes cartas
        elseif nObjetos > 1 then

            colocar_carta = 'mazo'

          end


        end


      print('Colocamos? ',colocar_carta)

      -- Bloqueamos carta si procede
      if colocar_carta == 'si' then
        -- Tenemos que colocar en su sitio

        print('Colocar')
        -- -- Detectamos lado de mesa
        -- local signo     = 1
        -- if posicionZonai.x < 0 then
        --   signo = -1
        -- end
        --
        -- posX = paramXA*signo - (nObjetos-1)*paramXB*signo
        -- -- Posición de la zona
        -- posicionCarta.x = posicionZonai.x - posX
        -- posicionCarta.y = paramYA
        -- posicionCarta.z = posicionZonai.z
        --
        -- --angX = signo * ( (8-nObjetos)*(angA/8) + angB )
        -- angX = angB
        -- rotacionCarta.x = angX
        -- rotacionCarta.y = rotacionZonai.y
        -- rotacionCarta.z = rotacionZonai.z
        --
        -- -- Colocamos
        -- objectsInZone[k_new].setPosition(posicionCarta)
        -- objectsInZone[k_new].setRotation(rotacionCarta)
        --
        -- -- Bloqueamos
        -- objectsInZone[k_new].setLock(true)

      end


    end

    arg_out = {}
    arg_out[1] = nObjetosActual

    return arg_out

  -- Final de función
  end
